{"version":3,"sources":["components/ColorBox.js","components/UserColorBox.js","components/InputField.js","components/UserInputs.js","components/ScoreBoard.js","components/Game.js","components/Intro.js","App.js","index.js"],"names":["ColorBox","this","props","randomColor","_this$props$color","color","red","green","blue","react_default","a","createElement","mode","style","textAlign","backgroundColor","concat","className","React","Component","UserColorBox","_props$color","userColorBox","visibility","guessed","InputField","charAt","toUpperCase","type","min","max","appearance","value","guess","onChange","e","UserInputs","components_InputField","display","onClick","ScoreBoard","score","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomNum","Math","floor","random","setState","handleClick","bind","assertThisInitialized","handleChange","state","objectSpread","defineProperty","target","evalGuess","sqrSum","hasOwnProperty","pow","sqrt","toFixed","components_ScoreBoard","components_ColorBox","components_UserInputs","components_UserColorBox","Intro","href","rel","App","changeMode","Screen","src_components_Game","src_components_Intro","id","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8df7e18c.chunk.js","sourcesContent":["import React from 'react';\n\nclass ColorBox extends React.Component {\n  componentDidMount() {\n    if (this.props.randomColor) {\n      this.props.randomColor();\n    } \n  }\n  render() {\n    let {red, green, blue} = this.props.color;\n\n    return (\n      <div>\n        {this.props.mode === \"game\" &&\n          (<h3 style={{textAlign: \"center\"}}>Target</h3>)\n        }\n        \n        <div \n          style={{backgroundColor: `rgb(${red}, ${green}, ${blue})`}}\n          className=\"color-box\"\n        />\n      </div>\n    )\n  }\n}\n\nexport default ColorBox;","import React from 'react'\n\nfunction UserColorBox(props) {\n  let {red, green, blue} = props.color;\n  const userColorBox = {\n    backgroundColor: `rgb(${red}, ${green}, ${blue})`,\n    visibility: props.guessed ? \"visible\" : \"hidden\"\n  }\n\n  return (\n    <div>\n      <h3 style={{textAlign: \"center\", visibility: props.guessed ? \"visible\" : \"hidden\"}}>Your Guess</h3>\n      <div \n        style={userColorBox}\n        className=\"color-box\"\n      />\n    </div>\n  )\n}\n\nexport default UserColorBox\n","import React from 'react'\n\nfunction InputField(props) {\n  const sliderStyle = {\n    appearance: \"none\",\n    backgroundColor: \"red\"\n  }\n\n  return (\n    <div>\n      <label className=\"current-color-value\">\n        {props.color.charAt(0).toUpperCase()}\n      </label>\n      <input \n        type=\"range\" \n        min=\"0\" \n        max=\"255\"\n        style={sliderStyle}\n        value={props.guess}\n        onChange={e => {\n          if(!props.guessed) {\n            props.onChange(e, props.color)}\n          }\n        }\n      />\n      <span className=\"current-color-value\">{props.guess}</span>\n    </div>\n  )\n}\n\nexport default InputField\n","import React from 'react';\n\nimport InputField from './InputField.js';\n\nfunction UserInputs(props) {\n  return (\n    <div className=\"slider-area\">\n      <InputField \n        color='red' \n        guess={props.guess.red}\n        guessed={props.guessed}\n        onChange={props.onChange} \n      />\n      <InputField \n        color='green' \n        guess={props.guess.green}\n        guessed={props.guessed}\n        onChange={props.onChange}\n      />\n      <InputField \n        color='blue' \n        guess={props.guess.blue}\n        guessed={props.guessed} \n        onChange={props.onChange}\n      />\n\n      <br/>\n\n      <div \n        className=\"buttons-container\"\n        style={{display: props.mode === \"intro\" ? \"none\" : \"block\"}}>\n        <button \n          type=\"submit\"\n          onClick={props.onClick}\n          >\n          Submit guess\n        </button>\n        <br/>\n        <button\n          style={{visibility: props.guessed ? \"visible\" : \"hidden\"}}\n          onClick={props.onClick}\n          >\n          Play again!\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default UserInputs;","import React from 'react'\n\nfunction ScoreBoard(props) {\n  return (\n    <div\n      className=\"score\"\n      style={{visibility: props.guessed ? \"visible\" : \"hidden\"}}>\n      <h2>Score: {props.score}%</h2>\n      {/* <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>Color</th>\n            <th>Guess</th>\n          </tr>\n          <tr>\n            <td>Red:</td>\n            <td>{props.color.red}</td>\n            <td>{props.guess.red}</td>\n          </tr>\n          <tr>\n            <td>Green:</td>\n            <td>{props.color.green}</td>\n            <td>{props.guess.green}</td>\n          </tr>\n          <tr>\n            <td>Blue:</td>\n            <td>{props.color.blue}</td>\n            <td>{props.guess.blue}</td>\n          </tr>\n        </tbody>\n      </table> */}\n    </div>\n  )\n}\n\nexport default ScoreBoard\n","import React from 'react';\n\nimport ColorBox from './ColorBox';\nimport UserColorBox from './UserColorBox.js';\nimport UserInputs from './UserInputs.js';\nimport ScoreBoard from './ScoreBoard.js';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      color: {\n        red: '',\n        green: '',\n        blue: ''\n      },\n      guess: {\n        red: 0,\n        green: 0,\n        blue: 0\n      },\n      guessed: false,\n      score: 0\n    }\n  }\n\n  handleChange(e, color) {\n    this.setState({\n      guess: {\n        ...this.state.guess,\n        [color]: e.target.value\n      }\n    })\n  }\n\n  handleClick() {\n    if (!this.state.guessed) {\n      this.setState({\n        guessed: !this.state.guessed,\n        score: this.evalGuess()\n      })\n    } else {\n      this.randomColor();\n      this.setState({\n        guess: {\n          red: 0,\n          green: 0,\n          blue: 0\n        },\n        guessed: !this.state.guessed,\n        score: 0,\n      })\n    }\n  }\n\n  evalGuess() {\n    let sqrSum = 0;\n    for (let color in this.state.color) {\n      if (this.state.color.hasOwnProperty(color)) {\n        sqrSum += Math.pow(this.state.color[color] - this.state.guess[color] ,2);\n      }\n    }\n    return (100 - (100 / Math.sqrt(3 * Math.pow(256,2))) * Math.sqrt(sqrSum)).toFixed(2);\n  }\n\n  randomColor = () => {\n    function randomNum() {\n      return Math.floor(Math.random() * 256);\n    };\n\n    this.setState({\n      color: {\n        red: randomNum(),\n        green: randomNum(),\n        blue: randomNum()\n      }\n    });\n  }\n  \n  render() {\n    return (\n      <div>\n        <ScoreBoard\n          color={this.state.color} \n          guess={this.state.guess}\n          guessed={this.state.guessed}\n          score={this.state.score}\n          onClick={this.handleClick}\n        />\n        <div className=\"game\">\n          <ColorBox\n            mode={this.props.mode}\n            color={this.state.color}\n            randomColor={this.randomColor}\n          />\n          <UserInputs\n            color={this.state.color}\n            guess={this.state.guess}\n            guessed={this.state.guessed}\n            onChange={this.handleChange}\n            onClick={this.handleClick}\n          />\n          <UserColorBox\n            color={this.state.guess}\n            guessed={this.state.guessed}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game;\n","import React from 'react';\n\nimport ColorBox from './ColorBox.js'\nimport UserInputs from './UserInputs.js';\nimport './Intro.css'\n\nclass Intro extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      color: {\n        red: 255,\n        green: 128,\n        blue: 0\n      }\n    }\n  }\n\n  handleChange(e, color) {\n    this.setState({\n      color: {\n        ...this.state.color,\n        [color]: e.target.value\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"intro-container\">\n        <section className=\"intro-text\">\n          <p>\n            The additive color model of RGB allows screens to render millions of colors only by combining three primary colors: <strong>R</strong>ed, <strong>G</strong>reen and <strong>B</strong>lue. The values of these color components range from 0 to 255 reflecting their intensity. Values closer to 0 represent darker colorrs while values towards 255 result in brighter colors. \n          </p>\n          <p>\n            For example the color <i>rgb(255, 128, 0)</i> contains 255 units of <i>red</i>, 128 units of <i>green</i> and 0 units of <i>blue</i>. Adding these up result in color orange. You can read more about the RGB model <a href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> or you can try it out here on the right.\n          </p>\n          <p>\n            In this simple game you can test your knowledge and perception about colors. You will see a target color and the task is to try guess its RGB code as accurately as possible. Sounds simple right?\n          </p>\n        </section>\n\n        <div>\n          <ColorBox\n            mode={this.props.mode}\n            color={this.state.color}\n          />\n          <UserInputs\n            mode={this.props.mode}\n            guess={this.state.color}\n            onChange={this.handleChange}\n          />\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default Intro","import React from 'react';\n\nimport Game from './components/Game';\nimport Intro from './components/Intro';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeMode = this.changeMode.bind(this);\n\n    this.state = {\n      mode: \"intro\"\n    }\n  }\n\n  changeMode() {\n    if (this.state.mode === \"intro\") {\n      this.setState({mode: \"game\"})\n    } else {\n      this.setState({mode: \"intro\"})\n    }\n  }\n\n  render () {\n    let Screen;\n    switch (this.state.mode) {\n      case \"game\":\n        Screen = <Game mode={this.state.mode}/>;\n        break;\n      case \"intro\":\n        Screen = <Intro mode={this.state.mode}/>;\n        break;\n      default:\n        Screen = <Intro mode={this.state.mode}/>;\n        break;\n    }\n\n    return (\n      <div>\n        <h1>RGB color guesser</h1>\n        {Screen}\n        <div className=\"mode-button-container\">\n          <button\n            id=\"mode-button\"\n            onClick={this.changeMode}\n          >\n            {this.state.mode === \"intro\" ? \"Play!\" : \"Practice more\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}