{"version":3,"sources":["components/ColorBox.js","components/UserColorBox.js","components/InputField.js","components/UserInputs.js","components/ScoreBoard.js","components/Game.js","components/Intro.js","App.js","index.js"],"names":["ColorBox","this","props","randomColor","_this$props$color","color","red","green","blue","react_default","a","createElement","mode","style","textAlign","backgroundColor","concat","className","React","Component","UserColorBox","_props$color","userColorBox","visibility","guessed","InputField","charAt","toUpperCase","type","min","max","appearance","value","guess","onChange","e","UserInputs","components_InputField","display","onClick","ScoreBoard","highScore","score","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomNum","Math","floor","random","setState","handleClick","bind","assertThisInitialized","handleChange","state","objectSpread","defineProperty","parseInt","target","evalGuess","sqrSum","hasOwnProperty","pow","parseFloat","sqrt","toFixed","components_ScoreBoard","components_ColorBox","components_UserInputs","components_UserColorBox","Intro","aStyle","href","rel","App","changeMode","Screen","src_components_Game","src_components_Intro","id","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.9707fc41.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ColorBox extends React.Component {\n  componentDidMount() {\n    if (this.props.randomColor) {\n      this.props.randomColor();\n    } \n  }\n  render() {\n    let {red, green, blue} = this.props.color;\n\n    return (\n      <div>\n        {this.props.mode === \"game\" &&\n          (<h3 style={{textAlign: \"center\"}}>Target</h3>)\n        }\n        \n        <div \n          style={{backgroundColor: `rgb(${red}, ${green}, ${blue})`}}\n          className=\"color-box\"\n        />\n      </div>\n    )\n  }\n}\n\nColorBox.propTypes = {\n  color: PropTypes.shape({\n    red: PropTypes.number.isRequired,\n    green: PropTypes.number.isRequired,\n    blue: PropTypes.number.isRequired\n  }).isRequired,\n  randomColor: PropTypes.func,\n  mode: PropTypes.string.isRequired\n}\n\nexport default ColorBox;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction UserColorBox(props) {\n  let {red, green, blue} = props.color;\n  const userColorBox = {\n    backgroundColor: `rgb(${red}, ${green}, ${blue})`,\n    visibility: props.guessed ? \"visible\" : \"hidden\"\n  }\n\n  return (\n    <div>\n      <h3 style={{textAlign: \"center\", visibility: props.guessed ? \"visible\" : \"hidden\"}}>Your Guess</h3>\n      <div \n        style={userColorBox}\n        className=\"color-box\"\n      />\n    </div>\n  )\n}\n\nUserColorBox.propTypes = {\n  color: PropTypes.shape({\n    red: PropTypes.number,\n    green: PropTypes.number,\n    blue: PropTypes.number,\n  }).isRequired,\n  guessed: PropTypes.bool.isRequired\n}\n\nexport default UserColorBox\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InputField(props) {\n  const sliderStyle = {\n    appearance: \"none\"\n  }\n\n  return (\n    <div>\n      <label className=\"current-color-value\">\n        {props.color.charAt(0).toUpperCase()}\n      </label>\n      <input \n        type=\"range\" \n        min=\"0\" \n        max=\"255\"\n        style={sliderStyle}\n        value={props.guess}\n        onChange={e => {\n          if(!props.guessed) {\n            props.onChange(e, props.color)}\n          }\n        }\n      />\n      <span className=\"current-color-value\">{props.guess}</span>\n    </div>\n  )\n}\n\nInputField.propTypes = {\n  color: PropTypes.string.isRequired,\n  guess: PropTypes.number.isRequired,\n  guessed: PropTypes.bool,  // Cannot be required since `guessed` is not defined in \"intro\" mode\n  onChange: PropTypes.func.isRequired\n}\n\nexport default InputField\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport InputField from './InputField.js';\n\nfunction UserInputs(props) {\n  return (\n    <div className=\"slider-area\">\n      <InputField \n        color='red' \n        guess={props.guess.red}\n        guessed={props.guessed}\n        onChange={props.onChange} \n      />\n      <InputField \n        color='green' \n        guess={props.guess.green}\n        guessed={props.guessed}\n        onChange={props.onChange}\n      />\n      <InputField \n        color='blue' \n        guess={props.guess.blue}\n        guessed={props.guessed} \n        onChange={props.onChange}\n      />\n\n      <br/>\n\n      <div style={{display: props.mode === \"intro\" ? \"none\" : \"block\"}}>\n        <button onClick={props.onClick} >\n          {props.guessed ? \"Play again!\" : \"Submit guess\"}\n        </button>\n      </div>\n\n      <span\n        className=\"action-text\"\n        style={{display: props.mode !== \"intro\" ? \"none\" : \"block\"}}>\n        Change me!\n      </span>\n    </div>\n  )\n}\n\nUserInputs.propTypes = {\n  guess: PropTypes.shape({\n    red: PropTypes.number,\n    green: PropTypes.number,\n    blue: PropTypes.number\n  }).isRequired,\n  guessed: PropTypes.bool,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func.isRequired,\n  mode: PropTypes.string.isRequired\n}\n\nexport default UserInputs;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ScoreBoard(props) {\n  return (\n    <div className=\"score\">\n      <h2 style={{visibility: props.highScore ? \"visible\" : \"hidden\"}}>\n        Best: {props.highScore}%\n      </h2>\n      <h2 style={{visibility: props.guessed ? \"visible\" : \"hidden\"}}>\n        Score: {props.score}%\n      </h2>\n      {/* <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>Color</th>\n            <th>Guess</th>\n          </tr>\n          <tr>\n            <td>Red:</td>\n            <td>{props.color.red}</td>\n            <td>{props.guess.red}</td>\n          </tr>\n          <tr>\n            <td>Green:</td>\n            <td>{props.color.green}</td>\n            <td>{props.guess.green}</td>\n          </tr>\n          <tr>\n            <td>Blue:</td>\n            <td>{props.color.blue}</td>\n            <td>{props.guess.blue}</td>\n          </tr>\n        </tbody>\n      </table> */}\n    </div>\n  )\n}\n\nScoreBoard.propTypes = {\n  highScore: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired\n}\n\nexport default ScoreBoard\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorBox from './ColorBox';\nimport UserColorBox from './UserColorBox.js';\nimport UserInputs from './UserInputs.js';\nimport ScoreBoard from './ScoreBoard.js';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      color: {\n        red: 0,\n        green: 0,\n        blue: 0\n      },\n      guess: {\n        red: 0,\n        green: 0,\n        blue: 0\n      },\n      guessed: false,\n      score: 0,\n      highScore: 0  //TODO: if you want highscore to persist lift it to App state!\n    }\n  }\n\n  handleChange(e, color) {\n    this.setState({\n      guess: {\n        ...this.state.guess,\n        [color]: parseInt(e.target.value)\n      }\n    })\n  }\n\n  handleClick() {\n    if (!this.state.guessed) {\n      this.setState({\n        guessed: !this.state.guessed,\n        score: this.evalGuess()\n      })\n    } else {\n      this.randomColor();\n      this.setState({\n        guess: {\n          red: 0,\n          green: 0,\n          blue: 0\n        },\n        guessed: !this.state.guessed,\n        score: 0,\n      })\n    }\n    // Set highscore\n    if (this.state.score > this.state.highScore) {\n      this.setState({\n        highScore: this.state.score\n      })\n    }\n  }\n\n  evalGuess() {\n    let sqrSum = 0;\n    for (let color in this.state.color) {\n      if (this.state.color.hasOwnProperty(color)) {\n        sqrSum += Math.pow(this.state.color[color] - this.state.guess[color] ,2);\n      }\n    }\n    return parseFloat((100 - (100 / Math.sqrt(3 * Math.pow(256,2))) * Math.sqrt(sqrSum)).toFixed(2));\n  }\n\n  randomColor = () => {\n    function randomNum() {\n      return Math.floor(Math.random() * 256);\n    };\n\n    this.setState({\n      color: {\n        red: randomNum(),\n        green: randomNum(),\n        blue: randomNum()\n      }\n    });\n  }\n  \n  render() {\n    return (\n      <div>\n        <ScoreBoard\n          color={this.state.color} \n          guess={this.state.guess}\n          guessed={this.state.guessed}\n          score={this.state.score}\n          highScore={this.state.highScore}\n          onClick={this.handleClick}\n        />\n        <div className=\"game\">\n          <ColorBox\n            mode={this.props.mode} // TODO move props.mode to Context API\n            color={this.state.color}\n            randomColor={this.randomColor}\n          />\n          <UserInputs\n            mode={this.props.mode}\n            color={this.state.color}\n            guess={this.state.guess}\n            guessed={this.state.guessed}\n            onChange={this.handleChange}\n            onClick={this.handleClick}\n          />\n          <UserColorBox\n            color={this.state.guess}\n            guessed={this.state.guessed}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nGame.propTypes = {\n  mode: PropTypes.string.isRequired\n}\n\nexport default Game;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorBox from './ColorBox.js';\nimport UserInputs from './UserInputs.js';\nimport './Intro.css';\n\nclass Intro extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      color: {\n        red: 255,\n        green: 128,\n        blue: 0\n      }\n    }\n  }\n\n  handleChange(e, color) {\n    this.setState({\n      color: {\n        ...this.state.color,\n        [color]: parseInt(e.target.value)\n      }\n    })\n  }\n\n  render() {\n    let aStyle = {\n      color: `rgb(${this.state.color.red},${this.state.color.green},${this.state.color.blue})`\n    }\n    return (\n      <div className=\"intro-container\">\n        <section className=\"intro-text\">\n          <h2>What is RGB?</h2>\n          <p>\n            The RGB color model is used to create different colors using only three primitives: <strong>R</strong>ed, <strong>G</strong>reen and <strong>B</strong>lue. Adding different blends of these three colors together we can create more than 16 million unique colors.\n          </p>\n          <h2>What are these values?</h2>\n          <p>\n            The value of each color component ranges between 0 and 255 reflecting their own intensity. Lower values represent darker colors while higher values result in brighter ones. Read more <a style={aStyle}href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>, or just simply adjust the sliders on the right.\n          </p>\n          <h2>Okay, can I play now?</h2>\n          <p>\n            Off you go!\n          </p>\n        </section>\n\n        <div>\n          <ColorBox\n            mode={this.props.mode}\n            color={this.state.color}\n          />\n          <UserInputs\n            mode={this.props.mode}\n            guess={this.state.color}\n            onChange={this.handleChange}\n          />\n        </div>\n\n      </div>\n    )\n  }\n}\n\nIntro.propTypes = {\n  mode: PropTypes.string.isRequired\n}\n\nexport default Intro","import React from 'react';\n\nimport Game from './components/Game';\nimport Intro from './components/Intro';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeMode = this.changeMode.bind(this);\n\n    this.state = {\n      mode: \"intro\"\n    }\n  }\n\n  changeMode() {\n    if (this.state.mode === \"intro\") {\n      this.setState({mode: \"game\"})\n    } else {\n      this.setState({mode: \"intro\"})\n    }\n  }\n\n  render () {\n    let Screen;\n    switch (this.state.mode) {\n      case \"game\":\n        Screen = <Game mode={this.state.mode}/>;\n        break;\n      case \"intro\":\n        Screen = <Intro mode={this.state.mode}/>;\n        break;\n      default:\n        Screen = <Intro mode={this.state.mode}/>;\n        break;\n    }\n\n    return (\n      <div>\n        <h1>RGB color guesser</h1>\n        {Screen}\n        <div className=\"mode-button-container\">\n          <button\n            id=\"mode-button\"\n            onClick={this.changeMode}\n          >\n            {this.state.mode === \"intro\" ? \"Play!\" : \"Practice more\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}